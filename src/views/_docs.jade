section.docs#docs

  .title-wrapper
    .container
      h2.title Documentation

  .sub-section.doc-wrapper.options#docs-options
    .container
      h3.title Initialization options

      :jssrc
        $imageCropper.cropit(options);

      include _options

  .sub-section.doc-wrapper.methods#docs-apis
    .container
      h3.title APIs

      :jssrc
        // Returns the cropped image in Data URI format.
        // The second argument `options` takes the following keys:
        // - [type='image/png'] exported image type.
        // - [quality=.75] exported image quality, only works when type is
        //     'image/jpeg' or 'image/webp'.
        // - [originalSize=false] when set to true, export cropped part in
        //     original size, overriding exportZoom.
        // - [fillBg='#fff'] if `type` is 'image/jpeg', this color will be
        //     filled as the background of the exported image.
        $imageCropper.cropit('export', {
          type: 'image/jpeg',
          quality: .9,
          originalSize: true
        });

        // Returns whether the current image is big enough to be zoomable.
        // Note that an image cannot be zoomed to larger than its original size.
        $imageCropper.cropit('isZoomable');

        // Returns the source of current image.
        // If the image is loaded through the file input, the image source will be
        // in Data URI format.
        $imageCropper.cropit('imageSrc');

        // Sets image source.
        $imageCropper.cropit('imageSrc', 'http://placekitten.com/g/1280/800');

        // Returns the current image size.
        // E.g. { width: 1920, height: 1080 }
        $imageCropper.cropit('imageSize');

        // Returns the current preview area size.
        // E.g. { width: 600, height: 400 }
        $imageCropper.cropit('previewSize');

        // Sets preview area size.
        $imageCropper.cropit('previewSize', { width: 800, height: 450 });

        // Returns the image offset of the current cropping, with respect to the
        // preview area.
        // E.g. { x: -10, y: -15 }
        $imageCropper.cropit('offset');

        // Sets image offset.
        $imageCropper.cropit('offset', { x: -18, y: -54 });

        // Returns the current zoom.
        $imageCropper.cropit('zoom');

        // Sets image zoom.
        $imageCropper.cropit('zoom', .75);

        // Returns current initialZoom value.
        $imageCropper.cropit('initialZoom');

        // Sets initialZoom value.
        $imageCropper.cropit('initialZoom', 'image');

        // Returns current exportZoom value.
        $imageCropper.cropit('exportZoom');

        // Sets exportZoom value.
        $imageCropper.cropit('exportZoom', 2);

        // Returns current minZoom value.
        $imageCropper.cropit('minZoom');

        // Sets minZoom value.
        $imageCropper.cropit('minZoom', 'fit');

        // Returns current maxZoom value.
        $imageCropper.cropit('maxZoom');

        // Sets maxZoom value.
        $imageCropper.cropit('maxZoom', 1.25);

        // Disables the cropper.
        // Unbinds event listeners from preview, zoom slider and file input, and
        // adds `cropit-disabled` class to `$imageCropper`.
        $imageCropper.cropit('disable');

        // Re-enables the cropper.
        // Does the opposite to `disable` method.
        $imageCropper.cropit('reenable');

  .sub-section.doc-wrapper.styles#docs-styles
    .container
      h3.title Styling with CSS

      :htmlsrc
        <!-- Preview is relative positioned -->
        <!-- Add a wrapper if you need to absolute position it -->
        <div class="cropit-preview">
          <!-- Background image container is absolute positioned -->
          <div class="cropit-preview-background-container">
            <img class="cropit-preview-background" />
          </div>
          <!-- Image container is also absolute positioned -->
          <div class="cropit-preview-image-container">
            <img class="cropit-preview-image" />
          </div>
        </div>

        <!-- Zoom slider -->
        <input type="range" class="cropit-image-zoom-input" />

        <!-- File selector ->
        <!-- cropit will add accept="image/*" attribute to it -->
        <input type="file" class="cropit-image-input" />

      :csssrc
        /* Show load indicator when image is being loaded */
        .cropit-preview.cropit-image-loading .spinner {
          opacity: 1;
        }

        /* Show move cursor when image has been loaded */
        .cropit-preview.cropit-image-loaded {
          cursor: move;
        }

        /* Gray out zoom slider when the image cannot be zoomed */
        .cropit-image-zoom-input[disabled] {
          opacity: .2;
        }

        /* Hide default file input button if you want to use a custom button */
        input.cropit-image-input {
          visibility: hidden;
        }

        /* The following styles are only relevant to when background image is enabled */

        /* Translucent background image */
        .cropit-preview-background {
          opacity: .1;
        }

        /* Style the background image differently when hovered */
        .cropit-preview:hover .cropit-preview-background {
          opacity: .2;
        }

        /*
         * If the slider or anything else is covered by the background image,
         * use non-static position on it
         */
        input.cropit-image-zoom-input {
          position: relative;
        }

        /* Limit the background image by adding overflow: hidden */
        #image-cropper {
          overflow: hidden;
        }
